
000_LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001950  08001950  00011950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000002c  2000002c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00003e7e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000e6a  00000000  00000000  00023eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000408  00000000  00000000  00024d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000370  00000000  00000000  00025130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001e41  00000000  00000000  000254a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001669  00000000  00000000  000272e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002894a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e2c  00000000  00000000  000289c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001938 	.word	0x08001938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001938 	.word	0x08001938

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4aa2      	ldr	r2, [pc, #648]	; (800077c <MX_GPIO_Init+0x2a4>)
 80004f4:	4ba1      	ldr	r3, [pc, #644]	; (800077c <MX_GPIO_Init+0x2a4>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b9f      	ldr	r3, [pc, #636]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4a9b      	ldr	r2, [pc, #620]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000510:	4b9a      	ldr	r3, [pc, #616]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b98      	ldr	r3, [pc, #608]	; (800077c <MX_GPIO_Init+0x2a4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4a94      	ldr	r2, [pc, #592]	; (800077c <MX_GPIO_Init+0x2a4>)
 800052c:	4b93      	ldr	r3, [pc, #588]	; (800077c <MX_GPIO_Init+0x2a4>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b91      	ldr	r3, [pc, #580]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4a8d      	ldr	r2, [pc, #564]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000548:	4b8c      	ldr	r3, [pc, #560]	; (800077c <MX_GPIO_Init+0x2a4>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b8a      	ldr	r3, [pc, #552]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4a86      	ldr	r2, [pc, #536]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000564:	4b85      	ldr	r3, [pc, #532]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b83      	ldr	r3, [pc, #524]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4a7f      	ldr	r2, [pc, #508]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000580:	4b7e      	ldr	r3, [pc, #504]	; (800077c <MX_GPIO_Init+0x2a4>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b7c      	ldr	r3, [pc, #496]	; (800077c <MX_GPIO_Init+0x2a4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4879      	ldr	r0, [pc, #484]	; (8000780 <MX_GPIO_Init+0x2a8>)
 800059c:	f000 fd26 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4877      	ldr	r0, [pc, #476]	; (8000784 <MX_GPIO_Init+0x2ac>)
 80005a6:	f000 fd21 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4875      	ldr	r0, [pc, #468]	; (8000788 <MX_GPIO_Init+0x2b0>)
 80005b2:	f000 fd1b 	bl	8000fec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b6:	2308      	movs	r3, #8
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	486c      	ldr	r0, [pc, #432]	; (8000780 <MX_GPIO_Init+0x2a8>)
 80005ce:	f000 fb73 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4866      	ldr	r0, [pc, #408]	; (8000784 <MX_GPIO_Init+0x2ac>)
 80005ea:	f000 fb65 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ee:	2308      	movs	r3, #8
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f2:	2302      	movs	r3, #2
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005fe:	2305      	movs	r3, #5
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	485e      	ldr	r0, [pc, #376]	; (8000784 <MX_GPIO_Init+0x2ac>)
 800060a:	f000 fb55 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000612:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	485a      	ldr	r0, [pc, #360]	; (800078c <MX_GPIO_Init+0x2b4>)
 8000624:	f000 fb48 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000628:	2310      	movs	r3, #16
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000638:	2306      	movs	r3, #6
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4852      	ldr	r0, [pc, #328]	; (800078c <MX_GPIO_Init+0x2b4>)
 8000644:	f000 fb38 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000648:	23e0      	movs	r3, #224	; 0xe0
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000658:	2305      	movs	r3, #5
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	484a      	ldr	r0, [pc, #296]	; (800078c <MX_GPIO_Init+0x2b4>)
 8000664:	f000 fb28 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000668:	2304      	movs	r3, #4
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4845      	ldr	r0, [pc, #276]	; (8000790 <MX_GPIO_Init+0x2b8>)
 800067c:	f000 fb1c 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000692:	2305      	movs	r3, #5
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	483c      	ldr	r0, [pc, #240]	; (8000790 <MX_GPIO_Init+0x2b8>)
 800069e:	f000 fb0b 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4833      	ldr	r0, [pc, #204]	; (8000788 <MX_GPIO_Init+0x2b0>)
 80006bc:	f000 fafc 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006d2:	2306      	movs	r3, #6
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4829      	ldr	r0, [pc, #164]	; (8000784 <MX_GPIO_Init+0x2ac>)
 80006de:	f000 faeb 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80006e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4825      	ldr	r0, [pc, #148]	; (800078c <MX_GPIO_Init+0x2b4>)
 80006f8:	f000 fade 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80006fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800070e:	230a      	movs	r3, #10
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_GPIO_Init+0x2b4>)
 800071a:	f000 facd 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800071e:	2320      	movs	r3, #32
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_GPIO_Init+0x2b0>)
 8000732:	f000 fac1 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000736:	f44f 7310 	mov.w	r3, #576	; 0x240
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000748:	2304      	movs	r3, #4
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <MX_GPIO_Init+0x2b8>)
 8000754:	f000 fab0 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800075c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0x2a8>)
 800076e:	f000 faa3 	bl	8000cb8 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40021000 	.word	0x40021000
 8000784:	40020800 	.word	0x40020800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 f916 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f842 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff fe9a 	bl	80004d8 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_12 , GPIO_PIN_SET );
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007aa:	481d      	ldr	r0, [pc, #116]	; (8000820 <main+0x8c>)
 80007ac:	f000 fc1e 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 , GPIO_PIN_RESET );
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80007b6:	481a      	ldr	r0, [pc, #104]	; (8000820 <main+0x8c>)
 80007b8:	f000 fc18 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80007bc:	20fa      	movs	r0, #250	; 0xfa
 80007be:	f000 f975 	bl	8000aac <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_13 , GPIO_PIN_SET );
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <main+0x8c>)
 80007ca:	f000 fc0f 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15 , GPIO_PIN_RESET );
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <main+0x8c>)
 80007d6:	f000 fc09 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80007da:	20fa      	movs	r0, #250	; 0xfa
 80007dc:	f000 f966 	bl	8000aac <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_14 , GPIO_PIN_SET );
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <main+0x8c>)
 80007e8:	f000 fc00 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_13 | GPIO_PIN_12 | GPIO_PIN_15 , GPIO_PIN_RESET );
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <main+0x8c>)
 80007f4:	f000 fbfa 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80007f8:	20fa      	movs	r0, #250	; 0xfa
 80007fa:	f000 f957 	bl	8000aac <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_15 , GPIO_PIN_SET );
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <main+0x8c>)
 8000806:	f000 fbf1 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_13 | GPIO_PIN_12 | GPIO_PIN_14 , GPIO_PIN_RESET );
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <main+0x8c>)
 8000812:	f000 fbeb 	bl	8000fec <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000816:	20fa      	movs	r0, #250	; 0xfa
 8000818:	f000 f948 	bl	8000aac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD , GPIO_PIN_12 , GPIO_PIN_SET );
 800081c:	e7c2      	b.n	80007a4 <main+0x10>
 800081e:	bf00      	nop
 8000820:	40020c00 	.word	0x40020c00

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	; 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f878 	bl	8001928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <SystemClock_Config+0xcc>)
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <SystemClock_Config+0xcc>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xd0>)
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SystemClock_Config+0xd0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000898:	23a8      	movs	r3, #168	; 0xa8
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fbb9 	bl	8001020 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f820 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2105      	movs	r1, #5
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fe1a 	bl	8001510 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f809 	bl	80008f8 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x6>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 f986 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f866 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f92d 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff ff80 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f937 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f90d 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000028 	.word	0x20000028

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000028 	.word	0x20000028

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff ffee 	bl	8000a94 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_Delay+0x40>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffde 	bl	8000a94 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad2      	subs	r2, r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f7      	bcc.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000008 	.word	0x20000008

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	4909      	ldr	r1, [pc, #36]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	401a      	ands	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bee:	2101      	movs	r1, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	1e59      	subs	r1, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff90 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff49 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff5e 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffb0 	bl	8000c0c <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e16b      	b.n	8000fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 815a 	bne.w	8000fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80b4 	beq.w	8000fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4a5f      	ldr	r2, [pc, #380]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e44:	4b5e      	ldr	r3, [pc, #376]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b5c      	ldr	r3, [pc, #368]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a50      	ldr	r2, [pc, #320]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <HAL_GPIO_Init+0x328>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4a      	ldr	r2, [pc, #296]	; (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef0:	4934      	ldr	r1, [pc, #208]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f22:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae90 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021c00 	.word	0x40021c00
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e264      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d075      	beq.n	800112a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103e:	4ba3      	ldr	r3, [pc, #652]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b04      	cmp	r3, #4
 8001048:	d00c      	beq.n	8001064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104a:	4ba0      	ldr	r3, [pc, #640]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001052:	2b08      	cmp	r3, #8
 8001054:	d112      	bne.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001056:	4b9d      	ldr	r3, [pc, #628]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800105e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001062:	d10b      	bne.n	800107c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	4b99      	ldr	r3, [pc, #612]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d05b      	beq.n	8001128 <HAL_RCC_OscConfig+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d157      	bne.n	8001128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e23f      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x74>
 8001086:	4a91      	ldr	r2, [pc, #580]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001088:	4b90      	ldr	r3, [pc, #576]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e01d      	b.n	80010d0 <HAL_RCC_OscConfig+0xb0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x98>
 800109e:	4a8b      	ldr	r2, [pc, #556]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4a88      	ldr	r2, [pc, #544]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0xb0>
 80010b8:	4a84      	ldr	r2, [pc, #528]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	4b84      	ldr	r3, [pc, #528]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4a81      	ldr	r2, [pc, #516]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	4b81      	ldr	r3, [pc, #516]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcdc 	bl	8000a94 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcd8 	bl	8000a94 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e204      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0xc0>
 80010fe:	e014      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fcc8 	bl	8000a94 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fcc4 	bl	8000a94 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e1f0      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0xe8>
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d063      	beq.n	80011fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114a:	2b08      	cmp	r3, #8
 800114c:	d11c      	bne.n	8001188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114e:	4b5f      	ldr	r3, [pc, #380]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_RCC_OscConfig+0x152>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e1c4      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4956      	ldr	r1, [pc, #344]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	e03a      	b.n	80011fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d020      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <HAL_RCC_OscConfig+0x2b0>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fc7d 	bl	8000a94 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fc79 	bl	8000a94 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1a5      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011bc:	4943      	ldr	r1, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011be:	4b43      	ldr	r3, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
 80011d0:	e015      	b.n	80011fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x2b0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc5c 	bl	8000a94 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fc58 	bl	8000a94 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e184      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d030      	beq.n	800126c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d016      	beq.n	8001240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_RCC_OscConfig+0x2b4>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff fc3c 	bl	8000a94 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fc38 	bl	8000a94 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e164      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x200>
 800123e:	e015      	b.n	800126c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_OscConfig+0x2b4>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fc25 	bl	8000a94 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124e:	f7ff fc21 	bl	8000a94 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e14d      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a0 	beq.w	80013ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_OscConfig+0x2b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d121      	bne.n	80012fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_RCC_OscConfig+0x2b8>)
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_RCC_OscConfig+0x2b8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fbe7 	bl	8000a94 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	e011      	b.n	80012ee <HAL_RCC_OscConfig+0x2ce>
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	42470000 	.word	0x42470000
 80012d4:	42470e80 	.word	0x42470e80
 80012d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012dc:	f7ff fbda 	bl	8000a94 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e106      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x4e4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <HAL_RCC_OscConfig+0x2f0>
 8001302:	4a81      	ldr	r2, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001304:	4b80      	ldr	r3, [pc, #512]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	e01c      	b.n	800134a <HAL_RCC_OscConfig+0x32a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d10c      	bne.n	8001332 <HAL_RCC_OscConfig+0x312>
 8001318:	4a7b      	ldr	r2, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 800131a:	4b7b      	ldr	r3, [pc, #492]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6713      	str	r3, [r2, #112]	; 0x70
 8001324:	4a78      	ldr	r2, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001326:	4b78      	ldr	r3, [pc, #480]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	e00b      	b.n	800134a <HAL_RCC_OscConfig+0x32a>
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001334:	4b74      	ldr	r3, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6713      	str	r3, [r2, #112]	; 0x70
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001340:	4b71      	ldr	r3, [pc, #452]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d015      	beq.n	800137e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff fb9f 	bl	8000a94 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fb9b 	bl	8000a94 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0c5      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	4b65      	ldr	r3, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ee      	beq.n	800135a <HAL_RCC_OscConfig+0x33a>
 800137c:	e014      	b.n	80013a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb89 	bl	8000a94 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb85 	bl	8000a94 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0af      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ee      	bne.n	8001386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	4a56      	ldr	r2, [pc, #344]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 80013b0:	4b55      	ldr	r3, [pc, #340]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 809b 	beq.w	80014fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d05c      	beq.n	800148a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d141      	bne.n	800145c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d8:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_RCC_OscConfig+0x4ec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fb59 	bl	8000a94 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fb55 	bl	8000a94 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e081      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001404:	4940      	ldr	r1, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	3b01      	subs	r3, #1
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <HAL_RCC_OscConfig+0x4ec>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fb2e 	bl	8000a94 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fb2a 	bl	8000a94 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e056      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x41c>
 800145a:	e04e      	b.n	80014fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_RCC_OscConfig+0x4ec>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fb17 	bl	8000a94 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fb13 	bl	8000a94 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e03f      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x44a>
 8001488:	e037      	b.n	80014fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e032      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_RCC_OscConfig+0x4e8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d028      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d121      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d11a      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014c6:	4013      	ands	r3, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d111      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	3b01      	subs	r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40007000 	.word	0x40007000
 8001508:	40023800 	.word	0x40023800
 800150c:	42470060 	.word	0x42470060

08001510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0cc      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d20c      	bcs.n	800154c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0207 	and.w	r2, r3, #7
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4a59      	ldr	r2, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800156e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4a53      	ldr	r2, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4950      	ldr	r1, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d044      	beq.n	8001630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d119      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e067      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 0203 	bic.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001600:	f7ff fa48 	bl	8000a94 <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff fa44 	bl	8000a94 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e04f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d1eb      	bne.n	8001608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0207 	and.w	r2, r3, #7
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d90c      	bls.n	8001658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0207 	and.w	r2, r3, #7
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4919      	ldr	r1, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001682:	4912      	ldr	r1, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f821 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169a:	4601      	mov	r1, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	fa21 f303 	lsr.w	r3, r1, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f9a8 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	08001950 	.word	0x08001950
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	b08f      	sub	sp, #60	; 0x3c
 80016e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f4:	4b62      	ldr	r3, [pc, #392]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d007      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x34>
 8001700:	2b08      	cmp	r3, #8
 8001702:	d008      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x3a>
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 80b2 	bne.w	800186e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800170a:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800170e:	e0b1      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001714:	e0ae      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001716:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001720:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d04e      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172c:	4b54      	ldr	r3, [pc, #336]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	f04f 0400 	mov.w	r4, #0
 8001736:	f240 11ff 	movw	r1, #511	; 0x1ff
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	ea01 0103 	and.w	r1, r1, r3
 8001742:	ea02 0204 	and.w	r2, r2, r4
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	0160      	lsls	r0, r4, #5
 800174c:	6278      	str	r0, [r7, #36]	; 0x24
 800174e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001750:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001754:	6278      	str	r0, [r7, #36]	; 0x24
 8001756:	015b      	lsls	r3, r3, #5
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800175e:	1a5b      	subs	r3, r3, r1
 8001760:	eb64 0402 	sbc.w	r4, r4, r2
 8001764:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001768:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800176c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001770:	ebb8 0803 	subs.w	r8, r8, r3
 8001774:	eb69 0904 	sbc.w	r9, r9, r4
 8001778:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001790:	eb18 0801 	adds.w	r8, r8, r1
 8001794:	eb49 0902 	adc.w	r9, r9, r2
 8001798:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017b0:	4640      	mov	r0, r8
 80017b2:	4649      	mov	r1, r9
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	f04f 0400 	mov.w	r4, #0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	f7fe fd03 	bl	80001c8 <__aeabi_uldivmod>
 80017c2:	4603      	mov	r3, r0
 80017c4:	460c      	mov	r4, r1
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
 80017c8:	e043      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	ea01 0103 	and.w	r1, r1, r3
 80017e0:	ea02 0204 	and.w	r2, r2, r4
 80017e4:	460b      	mov	r3, r1
 80017e6:	4614      	mov	r4, r2
 80017e8:	0160      	lsls	r0, r4, #5
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017fc:	1a5b      	subs	r3, r3, r1
 80017fe:	eb64 0402 	sbc.w	r4, r4, r2
 8001802:	01a6      	lsls	r6, r4, #6
 8001804:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001808:	019d      	lsls	r5, r3, #6
 800180a:	1aed      	subs	r5, r5, r3
 800180c:	eb66 0604 	sbc.w	r6, r6, r4
 8001810:	00f3      	lsls	r3, r6, #3
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	00eb      	lsls	r3, r5, #3
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001824:	186d      	adds	r5, r5, r1
 8001826:	eb46 0602 	adc.w	r6, r6, r2
 800182a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800182e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001832:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001836:	4655      	mov	r5, sl
 8001838:	465e      	mov	r6, fp
 800183a:	4628      	mov	r0, r5
 800183c:	4631      	mov	r1, r6
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	f7fe fcbe 	bl	80001c8 <__aeabi_uldivmod>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	3301      	adds	r3, #1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800186c:	e002      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001872:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001876:	4618      	mov	r0, r3
 8001878:	373c      	adds	r7, #60	; 0x3c
 800187a:	46bd      	mov	sp, r7
 800187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001892:	490e      	ldr	r1, [pc, #56]	; (80018cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a8:	4c0b      	ldr	r4, [pc, #44]	; (80018d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018b6:	f7ff f875 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f000 f811 	bl	80018e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7fe ff69 	bl	8000794 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018d0:	08001970 	.word	0x08001970
  ldr r2, =_sbss
 80018d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018d8:	2000002c 	.word	0x2000002c

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>
	...

080018e0 <__libc_init_array>:
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	4e0d      	ldr	r6, [pc, #52]	; (8001918 <__libc_init_array+0x38>)
 80018e4:	4c0d      	ldr	r4, [pc, #52]	; (800191c <__libc_init_array+0x3c>)
 80018e6:	1ba4      	subs	r4, r4, r6
 80018e8:	10a4      	asrs	r4, r4, #2
 80018ea:	2500      	movs	r5, #0
 80018ec:	42a5      	cmp	r5, r4
 80018ee:	d109      	bne.n	8001904 <__libc_init_array+0x24>
 80018f0:	4e0b      	ldr	r6, [pc, #44]	; (8001920 <__libc_init_array+0x40>)
 80018f2:	4c0c      	ldr	r4, [pc, #48]	; (8001924 <__libc_init_array+0x44>)
 80018f4:	f000 f820 	bl	8001938 <_init>
 80018f8:	1ba4      	subs	r4, r4, r6
 80018fa:	10a4      	asrs	r4, r4, #2
 80018fc:	2500      	movs	r5, #0
 80018fe:	42a5      	cmp	r5, r4
 8001900:	d105      	bne.n	800190e <__libc_init_array+0x2e>
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001908:	4798      	blx	r3
 800190a:	3501      	adds	r5, #1
 800190c:	e7ee      	b.n	80018ec <__libc_init_array+0xc>
 800190e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001912:	4798      	blx	r3
 8001914:	3501      	adds	r5, #1
 8001916:	e7f2      	b.n	80018fe <__libc_init_array+0x1e>
 8001918:	08001968 	.word	0x08001968
 800191c:	08001968 	.word	0x08001968
 8001920:	08001968 	.word	0x08001968
 8001924:	0800196c 	.word	0x0800196c

08001928 <memset>:
 8001928:	4402      	add	r2, r0
 800192a:	4603      	mov	r3, r0
 800192c:	4293      	cmp	r3, r2
 800192e:	d100      	bne.n	8001932 <memset+0xa>
 8001930:	4770      	bx	lr
 8001932:	f803 1b01 	strb.w	r1, [r3], #1
 8001936:	e7f9      	b.n	800192c <memset+0x4>

08001938 <_init>:
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	bf00      	nop
 800193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193e:	bc08      	pop	{r3}
 8001940:	469e      	mov	lr, r3
 8001942:	4770      	bx	lr

08001944 <_fini>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	bf00      	nop
 8001948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194a:	bc08      	pop	{r3}
 800194c:	469e      	mov	lr, r3
 800194e:	4770      	bx	lr
